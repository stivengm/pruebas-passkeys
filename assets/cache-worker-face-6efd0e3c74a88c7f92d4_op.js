!function(){"use strict";var e={913:function(){try{self["workbox:core:6.5.3"]&&_()}catch(e){}},550:function(){try{self["workbox:expiration:6.5.3"]&&_()}catch(e){}},977:function(){try{self["workbox:precaching:6.5.3"]&&_()}catch(e){}},80:function(){try{self["workbox:routing:6.5.3"]&&_()}catch(e){}},873:function(){try{self["workbox:strategies:6.5.3"]&&_()}catch(e){}}},t={};function a(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,a),n.exports}!function(){a(913);const e={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of ${JSON.stringify(a)}.`},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${r}' passed into '${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${a}.${r?`${r}.`:""}${s}()' must be of type ${e}.`},"incorrect-class":({expectedClassName:e,paramName:t,moduleName:a,className:r,funcName:s,isReturnValueProblem:n})=>{if(!e||!a||!s)throw new Error("Unexpected input to 'incorrect-class' error.");const o=r?`${r}.`:"";return n?`The return value from '${a}.${o}${s}()' must be an instance of class ${e}.`:`The parameter '${t}' passed into '${a}.${o}${s}()' must be an instance of class ${e}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:r,funcName:s})=>{if(!(e&&t&&a&&r&&s))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${r}.${s}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries.`},"plugin-error-request-will-fetch":({thrownErrorMessage:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:r})=>`The supplied '${r}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${a} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:r,funcName:s,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${a}.${r}.${s}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.statuses or config.headersin ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed`+(t?` with an HTTP status of ${t}.`:"."),"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>`Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL ${e} with different integrity values. Please remove one of them.`,"missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`,"cross-origin-copy-response":({origin:e})=>`workbox-core.copyResponse() can only be used with same-origin responses. It was passed a response with origin ${e}.`,"opaque-streams-source":({type:e})=>{const t=`One of the workbox-streams sources resulted in an '${e}' response.`;return"opaqueredirect"===e?`${t} Please do not use a navigation request that results in a redirect as a source.`:`${t} Please ensure your sources are CORS-enabled.`}};class t extends Error{constructor(t,a){super(((t,a={})=>{const r=e[t];if(!r)throw new Error(`Unable to find message for code '${t}'.`);return r(a)})(t,a)),this.name=t,this.details=a}}const r=(e,a,r)=>{if("function"!=typeof e[a])throw r.expectedMethod=a,new t("missing-a-method",r)},s=(e,a,r)=>{if(!(e instanceof a))throw r.expectedClassName=a.name,new t("incorrect-class",r)},n=(e,a,r)=>{if(!a.includes(e))throw r.validValueDescription=`Valid values are ${JSON.stringify(a)}.`,new t("invalid-value",r)},o=(e,a,r)=>{if(typeof e!==a)throw r.expectedType=a,new t("incorrect-type",r)};function i(e){e.then((()=>{}))}const c=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,r){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...r);const s=e?[]:["%cworkbox",[`background: ${t[a]}`,"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...s,...r),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},r={},s=Object.keys(t);for(const e of s){const t=e;r[t]=(...e)=>{a(t,e)}}return r})();let h,u;const l=new WeakMap,d=new WeakMap,p=new WeakMap,m=new WeakMap,g=new WeakMap;let f={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return d.get(e);if("objectStoreNames"===t)return e.objectStoreNames||p.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return w(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function w(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const r=()=>{e.removeEventListener("success",s),e.removeEventListener("error",n)},s=()=>{t(w(e.result)),r()},n=()=>{a(e.error),r()};e.addEventListener("success",s),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&l.set(t,e)})).catch((()=>{})),g.set(t,e),t}(e);if(m.has(e))return m.get(e);const t=function(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(u||(u=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(y(this),e),w(l.get(this))}:function(...e){return w(t.apply(y(this),e))}:function(e,...a){const r=t.call(y(this),e,...a);return p.set(r,e.sort?e.sort():[e]),w(r)}:(e instanceof IDBTransaction&&function(e){if(d.has(e))return;const t=new Promise(((t,a)=>{const r=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",n),e.removeEventListener("abort",n)},s=()=>{t(),r()},n=()=>{a(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",s),e.addEventListener("error",n),e.addEventListener("abort",n)}));d.set(e,t)}(e),((e,t)=>t.some((t=>e instanceof t)))(e,h||(h=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,f):e);var t}(e);return t!==e&&(m.set(e,t),g.set(t,e)),t}const y=e=>g.get(e),b=["get","getKey","getAll","getAllKeys","count"],N=["put","add","delete","clear"],x=new Map;function v(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(x.get(t))return x.get(t);const a=t.replace(/FromIndex$/,""),r=t!==a,s=N.includes(a);if(!(a in(r?IDBIndex:IDBObjectStore).prototype)||!s&&!b.includes(a))return;const n=async function(e,...t){const n=this.transaction(e,s?"readwrite":"readonly");let o=n.store;return r&&(o=o.index(t.shift())),(await Promise.all([o[a](...t),s&&n.done]))[0]};return x.set(t,n),n}var _;_=f,f={..._,get:(e,t,a)=>v(e,t)||_.get(e,t,a),has:(e,t)=>!!v(e,t)||_.has(e,t)},a(550);const R="cache-entries",E=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class ${constructor(e){this._db=null,this._cacheName=e}_upgradeDb(e){const t=e.createObjectStore(R,{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1})}_upgradeDbAndDeleteOldDbs(e){this._upgradeDb(e),this._cacheName&&function(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);t&&a.addEventListener("blocked",(e=>t(e.oldVersion,e))),w(a).then((()=>{}))}(this._cacheName)}async setTimestamp(e,t){const a={url:e=E(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)},r=(await this.getDb()).transaction(R,"readwrite",{durability:"relaxed"});await r.store.put(a),await r.done}async getTimestamp(e){const t=await this.getDb(),a=await t.get(R,this._getId(e));return null==a?void 0:a.timestamp}async expireEntries(e,t){const a=await this.getDb();let r=await a.transaction(R).store.index("timestamp").openCursor(null,"prev");const s=[];let n=0;for(;r;){const a=r.value;a.cacheName===this._cacheName&&(e&&a.timestamp<e||t&&n>=t?s.push(r.value):n++),r=await r.continue()}const o=[];for(const e of s)await a.delete(R,e.id),o.push(e.url);return o}_getId(e){return this._cacheName+"|"+E(e)}async getDb(){return this._db||(this._db=await function(e,t,{blocked:a,upgrade:r,blocking:s,terminated:n}={}){const o=indexedDB.open(e,t),i=w(o);return r&&o.addEventListener("upgradeneeded",(e=>{r(w(o.result),e.oldVersion,e.newVersion,w(o.transaction),e)})),a&&o.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),i.then((e=>{n&&e.addEventListener("close",(()=>n())),s&&e.addEventListener("versionchange",(e=>s(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),i}("workbox-expiration",1,{upgrade:this._upgradeDbAndDeleteOldDbs.bind(this)})),this._db}}class C{constructor(e,a={}){if(this._isRunning=!1,this._rerunRequested=!1,o(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!a.maxEntries&&!a.maxAgeSeconds)throw new t("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});a.maxEntries&&o(a.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),a.maxAgeSeconds&&o(a.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=a.maxEntries,this._maxAgeSeconds=a.maxAgeSeconds,this._matchOptions=a.matchOptions,this._cacheName=e,this._timestampModel=new $(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),a=await self.caches.open(this._cacheName);for(const e of t)await a.delete(e,this._matchOptions);t.length>0?(c.groupCollapsed(`Expired ${t.length} `+(1===t.length?"entry":"entries")+" and removed "+(1===t.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),c.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach((e=>c.log(`    ${e}`))),c.groupEnd()):c.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,i(this.expireEntries()))}async updateTimestamp(e){o(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){const t=await this._timestampModel.getTimestamp(e),a=Date.now()-1e3*this._maxAgeSeconds;return void 0===t||t<a}throw new t("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}const k={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},q=e=>[k.prefix,e,k.suffix].filter((e=>e&&e.length>0)).join("-"),T=e=>e||q(k.precache),U=e=>e||q(k.runtime),L=e=>new URL(String(e),location.href).href.replace(new RegExp(`^${location.origin}`),""),D=new Set;function S(e,t){const a=t();return e.waitUntil(a),a}function P(e){if(!e)throw new t("add-to-cache-list-unexpected-type",{entry:e});if("string"==typeof e){const t=new URL(e,location.href);return{cacheKey:t.href,url:t.href}}const{revision:a,url:r}=e;if(!r)throw new t("add-to-cache-list-unexpected-type",{entry:e});if(!a){const e=new URL(r,location.href);return{cacheKey:e.href,url:e.href}}const s=new URL(r,location.href),n=new URL(r,location.href);return s.searchParams.set("__WB_REVISION__",a),{cacheKey:s.href,url:n.href}}a(977);class A{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:a})=>{if("install"===e.type&&t&&t.originalRequest&&t.originalRequest instanceof Request){const e=t.originalRequest.url;a?this.notUpdatedURLs.push(e):this.updatedURLs.push(e)}return a}}}class I{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:e,params:t})=>{const a=(null==t?void 0:t.cacheKey)||this._precacheController.getCacheKeyForURL(e.url);return a?new Request(a,{headers:e.headers}):e},this._precacheController=e}}function O(e,t){if(0!==t.length){c.groupCollapsed(e);for(const e of t)c.log(e);c.groupEnd()}}let M,W;function K(e,t){const a=new URL(e);for(const e of t)a.searchParams.delete(e);return a.href}class B{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}function j(e){return"string"==typeof e?new Request(e):e}a(873);class F{constructor(e,t){this._cacheKeys={},s(t.event,ExtendableEvent,{moduleName:"workbox-strategies",className:"StrategyHandler",funcName:"constructor",paramName:"options.event"}),Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new B,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const e of this._plugins)this._pluginStateMap.set(e,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:a}=this;let r=j(e);if("navigate"===r.mode&&a instanceof FetchEvent&&a.preloadResponse){const e=await a.preloadResponse;if(e)return c.log(`Using a preloaded navigation response for '${L(r.url)}'`),e}const s=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const e of this.iterateCallbacks("requestWillFetch"))r=await e({request:r.clone(),event:a})}catch(e){if(e instanceof Error)throw new t("plugin-error-request-will-fetch",{thrownErrorMessage:e.message})}const n=r.clone();try{let e;e=await fetch(r,"navigate"===r.mode?void 0:this._strategy.fetchOptions),c.debug(`Network request for '${L(r.url)}' returned a response with status '${e.status}'.`);for(const t of this.iterateCallbacks("fetchDidSucceed"))e=await t({event:a,request:n,response:e});return e}catch(e){throw c.log(`Network request for '${L(r.url)}' threw an error.`,e),s&&await this.runCallbacks("fetchDidFail",{error:e,event:a,originalRequest:s.clone(),request:n.clone()}),e}}async fetchAndCachePut(e){const t=await this.fetch(e),a=t.clone();return this.waitUntil(this.cachePut(e,a)),t}async cacheMatch(e){const t=j(e);let a;const{cacheName:r,matchOptions:s}=this._strategy,n=await this.getCacheKey(t,"read"),o=Object.assign(Object.assign({},s),{cacheName:r});a=await caches.match(n,o),a?c.debug(`Found a cached response in '${r}'.`):c.debug(`No cached response found in '${r}'.`);for(const e of this.iterateCallbacks("cachedResponseWillBeUsed"))a=await e({cacheName:r,matchOptions:s,cachedResponse:a,request:n,event:this.event})||void 0;return a}async cachePut(e,a){const r=j(e);await new Promise((e=>setTimeout(e,0)));const s=await this.getCacheKey(r,"write");{if(s.method&&"GET"!==s.method)throw new t("attempt-to-cache-non-get-request",{url:L(s.url),method:s.method});const e=a.headers.get("Vary");e&&c.debug(`The response for ${L(s.url)} has a 'Vary: ${e}' header. Consider setting the {ignoreVary: true} option on your strategy to ensure cache matching and deletion works as expected.`)}if(!a)throw c.error(`Cannot cache non-existent response for '${L(s.url)}'.`),new t("cache-put-with-no-response",{url:L(s.url)});const n=await this._ensureResponseSafeToCache(a);if(!n)return c.debug(`Response '${L(s.url)}' will not be cached.`,n),!1;const{cacheName:o,matchOptions:i}=this._strategy,h=await self.caches.open(o),u=this.hasCallback("cacheDidUpdate"),l=u?await async function(e,t,a,r){const s=K(t.url,a);if(t.url===s)return e.match(t,r);const n=Object.assign(Object.assign({},r),{ignoreSearch:!0}),o=await e.keys(t,n);for(const t of o)if(s===K(t.url,a))return e.match(t,r)}(h,s.clone(),["__WB_REVISION__"],i):null;c.debug(`Updating the '${o}' cache with a new Response for ${L(s.url)}.`);try{await h.put(s,u?n.clone():n)}catch(e){if(e instanceof Error)throw"QuotaExceededError"===e.name&&await async function(){c.log(`About to run ${D.size} callbacks to clean up caches.`);for(const e of D)await e(),c.log(e,"is complete.");c.log("Finished running callbacks.")}(),e}for(const e of this.iterateCallbacks("cacheDidUpdate"))await e({cacheName:o,oldResponse:l,newResponse:n.clone(),request:s,event:this.event});return!0}async getCacheKey(e,t){const a=`${e.url} | ${t}`;if(!this._cacheKeys[a]){let r=e;for(const e of this.iterateCallbacks("cacheKeyWillBeUsed"))r=j(await e({mode:t,request:r,event:this.event,params:this.params}));this._cacheKeys[a]=r}return this._cacheKeys[a]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const a of this.iterateCallbacks(e))await a(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if("function"==typeof t[e]){const a=this._pluginStateMap.get(t),r=r=>{const s=Object.assign(Object.assign({},r),{state:a});return t[e](s)};yield r}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,a=!1;for(const e of this.iterateCallbacks("cacheWillUpdate"))if(t=await e({request:this.request,response:t,event:this.event})||void 0,a=!0,!t)break;return a||(t&&200!==t.status&&(t=void 0),t&&200!==t.status&&(0===t.status?c.warn(`The response for '${this.request.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):c.debug(`The response for '${this.request.url}' returned a status code of '${e.status}' and won't be cached as a result.`))),t}}class H{constructor(e={}){this.cacheName=U(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,a="string"==typeof e.request?new Request(e.request):e.request,r="params"in e?e.params:void 0,s=new F(this,{event:t,request:a,params:r}),n=this._getResponse(s,a,t);return[n,this._awaitComplete(n,s,a,t)]}async _getResponse(e,a,r){let s;await e.runCallbacks("handlerWillStart",{event:r,request:a});try{if(s=await this._handle(a,e),!s||"error"===s.type)throw new t("no-response",{url:a.url})}catch(t){if(t instanceof Error)for(const n of e.iterateCallbacks("handlerDidError"))if(s=await n({error:t,event:r,request:a}),s)break;if(!s)throw t;c.log(`While responding to '${L(a.url)}', an ${t instanceof Error?t.toString():""} error occurred. Using a fallback response provided by a handlerDidError plugin.`)}for(const t of e.iterateCallbacks("handlerWillRespond"))s=await t({event:r,request:a,response:s});return s}async _awaitComplete(e,t,a,r){let s,n;try{s=await e}catch(n){}try{await t.runCallbacks("handlerDidRespond",{event:r,request:a,response:s}),await t.doneWaiting()}catch(e){e instanceof Error&&(n=e)}if(await t.runCallbacks("handlerDidComplete",{event:r,request:a,response:s,error:n}),t.destroy(),n)throw n}}class V extends H{constructor(e={}){e.cacheName=T(e.cacheName),super(e),this._fallbackToNetwork=!1!==e.fallbackToNetwork,this.plugins.push(V.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){return await t.cacheMatch(e)||(t.event&&"install"===t.event.type?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,a){let r;const s=a.params||{};if(!this._fallbackToNetwork)throw new t("missing-precache-entry",{cacheName:this.cacheName,url:e.url});{c.warn(`The precached response for ${L(e.url)} in ${this.cacheName} was not found. Falling back to the network.`);const t=s.integrity,n=e.integrity,o=!n||n===t;r=await a.fetch(new Request(e,{integrity:"no-cors"!==e.mode?n||t:void 0})),t&&o&&"no-cors"!==e.mode&&(this._useDefaultCacheabilityPluginIfNeeded(),await a.cachePut(e,r.clone())&&c.log(`A response for ${L(e.url)} was used to "repair" the precache.`))}{const t=s.cacheKey||await a.getCacheKey(e,"read");c.groupCollapsed("Precaching is responding to: "+L(e.url)),c.log(`Serving the precached url: ${L(t instanceof Request?t.url:t)}`),c.groupCollapsed("View request details here."),c.log(e),c.groupEnd(),c.groupCollapsed("View response details here."),c.log(r),c.groupEnd(),c.groupEnd()}return r}async _handleInstall(e,a){this._useDefaultCacheabilityPluginIfNeeded();const r=await a.fetch(e);if(!await a.cachePut(e,r.clone()))throw new t("bad-precaching-response",{url:e.url,status:r.status});return r}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[a,r]of this.plugins.entries())r!==V.copyRedirectedCacheableResponsesPlugin&&(r===V.defaultPrecacheCacheabilityPlugin&&(e=a),r.cacheWillUpdate&&t++);0===t?this.plugins.push(V.defaultPrecacheCacheabilityPlugin):t>1&&null!==e&&this.plugins.splice(e,1)}}V.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:e})=>!e||e.status>=400?null:e},V.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:e})=>e.redirected?await async function(e,a){let r=null;if(e.url&&(r=new URL(e.url).origin),r!==self.location.origin)throw new t("cross-origin-copy-response",{origin:r});const s=e.clone(),n={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},o=function(){if(void 0===M){const e=new Response("");if("body"in e)try{new Response(e.body),M=!0}catch(e){M=!1}M=!1}return M}()?s.body:await s.blob();return new Response(o,n)}(e):e};class G{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:a=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new V({cacheName:T(e),plugins:[...t,new I({precacheController:this})],fallbackToNetwork:a}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){((e,a)=>{if(!Array.isArray(e))throw new t("not-an-array",{moduleName:"workbox-precaching",className:"PrecacheController",funcName:"addToCacheList",paramName:"entries"})})(e);const a=[];for(const r of e){"string"==typeof r?a.push(r):r&&void 0===r.revision&&a.push(r.url);const{cacheKey:e,url:s}=P(r),n="string"!=typeof r&&r.revision?"reload":"default";if(this._urlsToCacheKeys.has(s)&&this._urlsToCacheKeys.get(s)!==e)throw new t("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(s),secondEntry:e});if("string"!=typeof r&&r.integrity){if(this._cacheKeysToIntegrities.has(e)&&this._cacheKeysToIntegrities.get(e)!==r.integrity)throw new t("add-to-cache-list-conflicting-integrities",{url:s});this._cacheKeysToIntegrities.set(e,r.integrity)}if(this._urlsToCacheKeys.set(s,e),this._urlsToCacheModes.set(s,n),a.length>0){const e=`Workbox is precaching URLs without revision info: ${a.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;c.warn(e)}}}install(e){return S(e,(async()=>{const t=new A;this.strategy.plugins.push(t);for(const[t,a]of this._urlsToCacheKeys){const r=this._cacheKeysToIntegrities.get(a),s=this._urlsToCacheModes.get(t),n=new Request(t,{integrity:r,cache:s,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:a},request:n,event:e}))}const{updatedURLs:a,notUpdatedURLs:r}=t;return function(e,t){const a=e.length,r=t.length;if(a||r){let s=`Precaching ${a} file${1===a?"":"s"}.`;r>0&&(s+=` ${r} file${1===r?" is":"s are"} already cached.`),c.groupCollapsed(s),O("View newly precached URLs.",e),O("View previously precached URLs.",t),c.groupEnd()}}(a,r),{updatedURLs:a,notUpdatedURLs:r}}))}activate(e){return S(e,(async()=>{const e=await self.caches.open(this.strategy.cacheName),t=await e.keys(),a=new Set(this._urlsToCacheKeys.values()),r=[];for(const s of t)a.has(s.url)||(await e.delete(s),r.push(s.url));return function(e){const t=e.length;t>0&&(c.groupCollapsed(`During precaching cleanup, ${t} cached request${1===t?" was":"s were"} deleted.`),((e,t)=>{c.groupCollapsed("Deleted Cache Requests");for(const e of t)c.log(e);c.groupEnd()})(0,e),c.groupEnd())}(r),{deletedURLs:r}}))}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,a=this.getCacheKeyForURL(t);if(a)return(await self.caches.open(this.strategy.cacheName)).match(a)}createHandlerBoundToURL(e){const a=this.getCacheKeyForURL(e);if(!a)throw new t("non-precached-url",{url:e});return t=>(t.request=new Request(e),t.params=Object.assign({cacheKey:a},t.params),this.strategy.handle(t))}}const Y=()=>(W||(W=new G),W);a(80);const z=["DELETE","GET","HEAD","PATCH","POST","PUT"],J=e=>e&&"object"==typeof e?(r(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(o(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class Q{constructor(e,t,a="GET"){o(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&n(a,z,{paramName:"method"}),this.handler=J(t),this.match=e,this.method=a}setCatchHandler(e){this.catchHandler=J(e)}}class X extends Q{constructor(e,t,a){s(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"}),super((({url:t})=>{const a=e.exec(t.href);if(a){if(t.origin===location.origin||0===a.index)return a.slice(1);c.debug(`The regular expression '${e.toString()}' only partially matched against the cross-origin URL '${t.toString()}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}}),t,a)}}class Z{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",(e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)}))}addCacheListener(){self.addEventListener("message",(e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;c.debug("Caching URLs from the window",t.urlsToCache);const a=Promise.all(t.urlsToCache.map((t=>{"string"==typeof t&&(t=[t]);const a=new Request(...t);return this.handleRequest({request:a,event:e})})));e.waitUntil(a),e.ports&&e.ports[0]&&a.then((()=>e.ports[0].postMessage(!0)))}}))}handleRequest({request:e,event:t}){s(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const a=new URL(e.url,location.href);if(!a.protocol.startsWith("http"))return void c.debug("Workbox Router only supports URLs that start with 'http'.");const r=a.origin===location.origin,{params:n,route:o}=this.findMatchingRoute({event:t,request:e,sameOrigin:r,url:a});let i=o&&o.handler;const h=[];i&&(h.push(["Found a route to handle this request:",o]),n&&h.push(["Passing the following params to the route's handler:",n]));const u=e.method;if(!i&&this._defaultHandlerMap.has(u)&&(h.push(`Failed to find a matching route. Falling back to the default handler for ${u}.`),i=this._defaultHandlerMap.get(u)),!i)return void c.debug(`No route found for: ${L(a)}`);let l;c.groupCollapsed(`Router is responding to: ${L(a)}`),h.forEach((e=>{Array.isArray(e)?c.log(...e):c.log(e)})),c.groupEnd();try{l=i.handle({url:a,request:e,event:t,params:n})}catch(e){l=Promise.reject(e)}const d=o&&o.catchHandler;return l instanceof Promise&&(this._catchHandler||d)&&(l=l.catch((async r=>{if(d){c.groupCollapsed(`Error thrown when responding to:  ${L(a)}. Falling back to route's Catch Handler.`),c.error("Error thrown by:",o),c.error(r),c.groupEnd();try{return await d.handle({url:a,request:e,event:t,params:n})}catch(e){e instanceof Error&&(r=e)}}if(this._catchHandler)return c.groupCollapsed(`Error thrown when responding to:  ${L(a)}. Falling back to global Catch Handler.`),c.error("Error thrown by:",o),c.error(r),c.groupEnd(),this._catchHandler.handle({url:a,request:e,event:t});throw r}))),l}findMatchingRoute({url:e,sameOrigin:t,request:a,event:r}){const s=this._routes.get(a.method)||[];for(const n of s){let s;const o=n.match({url:e,sameOrigin:t,request:a,event:r});if(o)return o instanceof Promise&&c.warn(`While routing ${L(e)}, an async matchCallback function was used. Please convert the following route to use a synchronous matchCallback function:`,n),s=o,(Array.isArray(s)&&0===s.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(s=void 0),{route:n,params:s}}return{}}setDefaultHandler(e,t="GET"){this._defaultHandlerMap.set(t,J(e))}setCatchHandler(e){this._catchHandler=J(e)}registerRoute(e){o(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),r(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),o(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),r(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),o(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new t("unregister-route-but-not-found-with-method",{method:e.method});const a=this._routes.get(e.method).indexOf(e);if(!(a>-1))throw new t("unregister-route-route-not-registered");this._routes.get(e.method).splice(a,1)}}let ee;function te(e,a,r){let s;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new t("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const a=e.startsWith("http")?n.pathname:e,r="[*:?+]";new RegExp(`${r}`).exec(a)&&c.debug(`The '$capture' parameter contains an Express-style wildcard character (${r}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}s=new Q((({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&c.debug(`${e} only partially matches the cross-origin URL ${t.toString()}. This route will only handle cross-origin requests if they match the entire URL.`),t.href===n.href)),a,r)}else if(e instanceof RegExp)s=new X(e,a,r);else if("function"==typeof e)s=new Q(e,a,r);else{if(!(e instanceof Q))throw new t("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});s=e}return(ee||(ee=new Z,ee.addFetchListener(),ee.addCacheListener()),ee).registerRoute(s),s}class ae extends Q{constructor(e,t){super((({request:a})=>{const r=e.getURLsToCacheKeys();for(const s of function*(e,{ignoreURLParametersMatching:t=[/^utm_/,/^fbclid$/],directoryIndex:a="index.html",cleanURLs:r=!0,urlManipulation:s}={}){const n=new URL(e,location.href);n.hash="",yield n.href;const o=function(e,t=[]){for(const a of[...e.searchParams.keys()])t.some((e=>e.test(a)))&&e.searchParams.delete(a);return e}(n,t);if(yield o.href,a&&o.pathname.endsWith("/")){const e=new URL(o.href);e.pathname+=a,yield e.href}if(r){const e=new URL(o.href);e.pathname+=".html",yield e.href}if(s){const e=s({url:n});for(const t of e)yield t.href}}(a.url,t)){const t=r.get(s);if(t)return{cacheKey:t,integrity:e.getIntegrityForCacheKey(t)}}c.debug("Precaching did not find a match for "+L(a.url))}),e.strategy)}}const re=(e,t)=>`Using ${e} to respond to '${L(t.url)}'`,se=e=>{e&&(c.groupCollapsed("View the final response here."),c.log(e||"[No response returned]"),c.groupEnd())},ne={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null},oe="Service Worker",ie=location.hostname.endsWith(".app.local")||"localhost"===location.hostname;self.__WB_DISABLE_DEV_LOGS=!0;const ce="1.0.2";ie&&console.debug(`Service worker version ${ce} loading...`),self.addEventListener("activate",(e=>{const t=T();e.waitUntil((async(e,t="-precache-")=>{const a=(await self.caches.keys()).filter((a=>a.includes(t)&&a.includes(self.registration.scope)&&a!==e));return await Promise.all(a.map((e=>self.caches.delete(e)))),a})(t).then((e=>{e.length>0&&c.log("The following out-of-date precaches were cleaned up automatically:",e)})))}));const he=[];var ue;ie&&console.trace(`${oe}:: Assets that will be cached: `,he),ue=he,Y().precache(ue),function(e){const t=Y();te(new ae(t,void 0))}(),te(/\.(?:css)$/,new class extends H{constructor(e={}){super(e),this.plugins.some((e=>"cacheWillUpdate"in e))||this.plugins.unshift(ne)}async _handle(e,a){const r=[];s(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"handle",paramName:"request"});const n=a.fetchAndCachePut(e).catch((()=>{}));a.waitUntil(n);let o,i=await a.cacheMatch(e);if(i)r.push(`Found a cached response in the '${this.cacheName}' cache. Will update with the network response in the background.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will wait for the network response.`);try{i=await n}catch(e){e instanceof Error&&(o=e)}}c.groupCollapsed(re(this.constructor.name,e));for(const e of r)c.log(e);if(se(i),c.groupEnd(),!i)throw new t("no-response",{url:e.url,error:o});return i}}),te(/\.(?:png|gif|jpg|jpeg|svg|wasm)$/,new class extends H{async _handle(e,a){const r=[];s(e,Request,{moduleName:"workbox-strategies",className:this.constructor.name,funcName:"makeRequest",paramName:"request"});let n,o=await a.cacheMatch(e);if(o)r.push(`Found a cached response in the '${this.cacheName}' cache.`);else{r.push(`No response found in the '${this.cacheName}' cache. Will respond with a network request.`);try{o=await a.fetchAndCachePut(e)}catch(e){e instanceof Error&&(n=e)}o?r.push("Got response from network."):r.push("Unable to get a response from the network.")}c.groupCollapsed(re(this.constructor.name,e));for(const e of r)c.log(e);if(se(o),c.groupEnd(),!o)throw new t("no-response",{url:e.url,error:n});return o}}({cacheName:"assets-cache-static",plugins:[new class{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:a,cachedResponse:r})=>{if(!r)return null;const s=this._isResponseDateFresh(r),n=this._getCacheExpiration(a);i(n.expireEntries());const o=n.updateTimestamp(t.url);if(e)try{e.waitUntil(o)}catch(t){"request"in e&&c.warn(`Unable to ensure service worker stays alive when updating cache entry for '${L(e.request.url)}'.`)}return s?r:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{o(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),s(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new t("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var a;e.maxEntries&&o(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&o(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(o(a=()=>this.deleteCacheAndMetadata(),"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),D.add(a),c.log("Registered a callback to respond to quota errors.",a))}_getCacheExpiration(e){if(e===U())throw new t("expire-custom-caches-only");let a=this._cacheExpirations.get(e);return a||(a=new C(e,this._config),this._cacheExpirations.set(e,a)),a}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);return null===t||t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}({maxEntries:250,maxAgeSeconds:2592e3,purgeOnQuotaError:!0})]})),self.addEventListener("message",(e=>{e&&e.data&&e.data.type&&("GET_VERSION"===e.data.type&&(ie&&console.debug(`${oe}:: Returning the service worker version: ${ce}`),e.ports[0].postMessage(ce)),"SKIP_WAITING"===e.data.type&&(ie&&console.debug(`${oe}:: Skipping waiting...`),self.skipWaiting()),"CLIENTS_CLAIM"===e.data.type&&(ie&&console.debug(`${oe}:: Claiming clients and cleaning old caches`),self.clients.claim()))}))}()}();